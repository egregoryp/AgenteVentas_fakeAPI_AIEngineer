from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Dict
from src.graph.graph import graph

# Initialize FastAPI application
app = FastAPI(
    title="Agente API",
    description=(
        "API for interacting with the Agente system. "
        "It allows users to send queries and receive structured responses."
    ),
    version="1.0.0",
)

# Add CORS middleware
origins = ["*"]
app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Request model for the /agente endpoint
class RequestAgente(BaseModel):
    question: str
    user_id: str
    session_id: str
    channel_id: str

# Response model for the /agente endpoint
class AgenteResponse(BaseModel):
    respuesta_final: str = "The final response generated by the agent"

# Root endpoint
@app.get("/")
async def root():
    return {"message": "Hello World"}

# /agente endpoint
@app.post("/agente", response_model=AgenteResponse)
async def agente(request: RequestAgente):
    try:
        # Extract and preprocess input data
        data = request.dict()
        question = data["question"].lower()
        user_id = data["user_id"].lower()
        session_id = data["session_id"].lower()
        channel_id = data["channel_id"].lower()

        # Configuration for the graph
        config = {"configurable": {"thread_id": "7"}}

        # Invoke the graph and get the response
        response = graph.invoke(
            {"messages": [("user", question)]},
            subgraphs=True,
            config=config
        )

        # Return the final response
        return {"respuesta_final": response[1]["respuesta_final"]}

    except Exception as e:
        # Handle any errors and return a user-friendly message
        return {"respuesta_final": f"An error occurred: {str(e)}"}
